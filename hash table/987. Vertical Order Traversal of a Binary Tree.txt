/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    Map<Integer, TreeMap<Integer, PriorityQueue<Integer> >> map = new HashMap<>();
    int minX = 0;
    int maxX = 0;
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        dfs(root,0,0);
        
        for (int x = minX; x <= maxX; ++x) {
            List<Integer> level = new ArrayList<>();
            // For each Y (in order bc TreeMap)
            for (int y : map.get(x).keySet()) {
                PriorityQueue<Integer> pq = map.get(x).get(y);
                while (pq.size () > 0) {
                    level.add(pq.poll());
                }
            }
            result.add(level);
        }
        
        return result;
    }
    public void dfs(TreeNode root, int x , int y){
        if(root == null) return;
        
        minX = Math.min(minX, x);
        maxX = Math.max(maxX, x);
        if(!map.containsKey(x)){
            map.put(x, new TreeMap<Integer, PriorityQueue<Integer>>());
        }
        if(!map.get(x).containsKey(y)){
            map.get(x).put(y, new PriorityQueue<Integer>());
        }
        map.get(x).get(y).offer(root.val);
        dfs(root.left,x-1,y+1);
        dfs(root.right,x+1,y+1);
    }
    
    
}